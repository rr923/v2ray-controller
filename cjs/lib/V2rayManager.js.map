{
  "version": 3,
  "sources": ["../../esm/lib/V2rayManager.js"],
  "sourcesContent": ["import grpc from '@grpc/grpc-js';\nimport protobuf from 'protobufjs';\nimport { PROTOS_DIR } from '../config.js';\n\nconst path = require('path');\n\nconst SERVICES_PROTO_PATH = {\n  hanlder: 'app/proxyman/command/command.proto',\n  stats: 'app/stats/command/command.proto',\n  logger: 'app/log/command/config.proto',\n};\nconst SERVICES = {\n  handler: 'v2ray.core.app.proxyman.command.HandlerService',\n  stats: 'v2ray.core.app.stats.command.StatsService',\n  logger: 'v2ray.core.app.log.command.LoggerService',\n};\nconst ACCOUNT_PROTO_PATH = {\n  torjan: 'proxy/trojan/config.proto',\n  vmess: 'proxy/vmess/account.proto',\n  vless: 'proxy/vless/account.proto',\n};\n\nconst PROXYMAN_OPERATIONS = {\n  addUser: 'v2ray.core.app.proxyman.command.AddUserOperation',\n  removeUser: 'v2ray.core.app.proxyman.command.RemoveUserOperation',\n};\n\nconst ACCOUNTS = {\n  torjan: 'v2ray.core.proxy.torjan.Account',\n  vmess: 'v2ray.core.proxy.vmess.Account',\n  vless: 'v2ray.core.proxy.vless.Account',\n};\n\nconst RECEIVER_SETTING = 'v2ray.core.app.proxyman.ReceiverConfig';\nconst PROXY_SETTINGS = {\n  trojan: 'v2ray.core.proxy.trojan.ServerConfig',\n  vmess: 'v2ray.core.proxy.vmess.inbound.Config',\n  vless: 'v2ray.core.proxy.vless.inbound.Config',\n};\nconst NEEDED_PROTOS = [\n  'app/proxyman/config.proto',\n  'proxy/vmess/inbound/config.proto',\n  'proxy/vless/inbound/config.proto',\n  'proxy/trojan/config.proto',\n];\n\n/**\n *  V2rayManager\n * @class\n * @classdesc V2rayManager\n * @param {string} grpcServerUrl - v2ray server grpc url\n * @example\n * const v2rayClient = new V2rayManager(\"localhost:10007\");\n *\n **/\n\nclass V2rayManager {\n  constructor(grpcServerUrl) {\n    this.grpcServerUrl = grpcServerUrl;\n    this.root = new protobuf.Root();\n    this.#initProtobufRoot();\n    this.services = {};\n    this.#initServices();\n  }\n  #initProtobufRoot() {\n    this.root.resolvePath = function (origin, target) {\n      if (/^google\\//.test(target)) return null; // ignored\n      const originPath = path.join(__dirname, '..', '..', 'proto');\n      return protobuf.util.path.resolve(`${originPath}/`, target || origin);\n    };\n  }\n  #initServices() {\n    this.root.loadSync(SERVICES_PROTO_PATH.hanlder);\n    let HandlerServiceDefinition = this.root.lookup(SERVICES.handler);\n    this.services.handler = this.#createGrpcClient(HandlerServiceDefinition);\n    this.root.loadSync(SERVICES_PROTO_PATH.stats);\n    let StatsServiceDefinition = this.root.lookup(SERVICES.stats);\n    this.services.stats = this.#createGrpcClient(StatsServiceDefinition);\n    this.root.loadSync(SERVICES_PROTO_PATH.logger);\n    let LoggerServiceDefinition = this.root.lookup(SERVICES.logger);\n    this.services.logger = this.#createGrpcClient(LoggerServiceDefinition);\n    //load inbound&outbound config proto\n    NEEDED_PROTOS.forEach((proto) => {\n      this.root.loadSync(proto);\n    });\n  }\n  #createGrpcClient(ServiceDefinition) {\n    const methods = Object.fromEntries(\n      Object.entries(ServiceDefinition.methods).map(([name, method]) => {\n        method.resolve();\n        return [\n          name,\n          {\n            path: `${ServiceDefinition.fullName.slice(1)}/${name}`,\n            requestStream: method.requestStream,\n            responseStream: method.responseStream,\n            requestType: method.resolvedRequestType.ctor,\n            responseType: method.resolvedResponseType.ctor,\n            requestSerialize: (message) => {\n              let res = method.resolvedRequestType.encode(message).finish();\n              return res;\n            },\n            requestDeserialize: (bytes) => {\n              return method.resolvedRequestType.decode(bytes);\n            },\n            responseSerialize: (message) => {\n              return method.resolvedResponseType.encode(message).finish();\n            },\n            responseDeserialize: (bytes) => {\n              return method.resolvedResponseType.decode(bytes);\n            },\n          },\n        ];\n      })\n    );\n    const serviceName = ServiceDefinition.fullName.slice(1);\n    const ClientConstructor = grpc.makeGenericClientConstructor(methods, serviceName);\n    const client = new ClientConstructor(this.grpcServerUrl, grpc.credentials.createInsecure());\n    return client;\n  }\n  #loadAnyMessage(type_url, message, protoPath) {\n    if (protoPath) {\n      this.root.loadSync(protoPath);\n    }\n    let AnyMessage = this.root.lookupType(type_url);\n    let originMessage = AnyMessage.create(message);\n    let verifiedRes = AnyMessage.verify(originMessage);\n    if (verifiedRes) {\n      this.#error('loadAnyMessage', verifiedRes);\n    }\n    let anyMessageBuffer = AnyMessage.encode(originMessage).finish();\n    let anyMessage = {\n      type_url: type_url,\n      value: anyMessageBuffer,\n    };\n    return anyMessage;\n  }\n  #verifyMessage(type_url, message, protoPath) {\n    if (protoPath) {\n      this.root.loadSync(protoPath);\n    }\n    let TheMessage = this.root.lookupType(type_url);\n    let originMessage = TheMessage.create(message);\n    let verifiedRes = TheMessage.verify(originMessage);\n    if (verifiedRes) {\n      this.#error('loadAnyMessage', verifiedRes);\n      return false;\n    }\n    return true;\n  }\n  #responseToObject(message) {\n    let messagePath = `${message.$type.parent.fullName.slice(1)}.${message.$type.name}`;\n    let Message = this.root.lookupType(messagePath);\n    return Message.toObject(message, {\n      longs: String,\n      enums: String,\n      bytes: String,\n    });\n  }\n  #error(method, error) {\n    console.error(`[V2ray API] [${method}] Error: `, error.details || error);\n  }\n\n  //Stats api\n  getSysStats() {\n    return new Promise((resolve, reject) => {\n      this.services.stats.GetSysStats({}, (error, response) => {\n        if (error) {\n          this.#error('GetSysStats', error);\n          resolve({\n            error: {\n              code: error.code,\n              details: error.details,\n            },\n          });\n          return false;\n        }\n        resolve(this.#responseToObject(response));\n      });\n    });\n  }\n  queryStats(pattern, reset) {\n    pattern = pattern || '';\n    reset = reset || false;\n    return new Promise((resolve, reject) => {\n      this.services.stats.QueryStats(\n        {\n          patterns: [pattern],\n          reset: reset,\n          regexp: true,\n        },\n        (error, response) => {\n          if (error) {\n            this.#error('QueryStats', error);\n            resolve({\n              error: {\n                code: error.code,\n                details: error.details,\n              },\n            });\n            return;\n          }\n          resolve(this.#responseToObject(response));\n        }\n      );\n    });\n  }\n  getStats(name, reset) {\n    return new Promise((resolve, reject) => {\n      this.services.stats.GetStats(\n        {\n          name: name,\n          reset: reset,\n        },\n        (error, response) => {\n          if (error) {\n            this.#error('GetStats', error);\n            resolve({\n              error: {\n                code: error.code,\n                details: error.details,\n              },\n            });\n            return;\n          }\n          resolve(this.#responseToObject(response));\n        }\n      );\n    });\n  }\n\n  //Logger api\n  restartLogger() {\n    return new Promise((resolve, reject) => {\n      this.services.logger.RestartLogger({}, (error, response) => {\n        if (error) {\n          this.#error('RestartLogger', error);\n          resolve({\n            error: {\n              code: error.code,\n              details: error.details,\n            },\n          });\n          return;\n        }\n        resolve(this.#responseToObject(response));\n      });\n    });\n  }\n  //Unstable interface\n  followLog(resolve) {\n    this.services.logger.FollowLog({}, (error, response) => {\n      if (error) {\n        this.#error('FollowLog', error);\n        resolve({\n          error: {\n            code: error.code,\n            details: error.details,\n          },\n        });\n        return;\n      }\n      resolve(this.#responseToObject(response));\n    });\n  }\n\n  //Handler api\n  #alterInbound(tag, operation) {\n    return new Promise((resolve, reject) => {\n      this.services.handler.AlterInbound(\n        {\n          tag: tag,\n          operation: operation,\n        },\n        (error, response) => {\n          if (error) {\n            this.#error('AlterInbound', error);\n            resolve({\n              error: {\n                code: error.code,\n                details: error.details,\n              },\n            });\n            return;\n          }\n          resolve(response);\n        }\n      );\n    });\n  }\n  //to do: don't know the outbound operation\n  alterOutbound(tag, operation) {\n    return new Promise((resolve, reject) => {\n      this.services.handler.AlterOutbound(\n        {\n          tag: tag,\n          operation: operation,\n        },\n        (error, response) => {\n          if (error) {\n            this.#error('AlterOutbound', error);\n            resolve({\n              error: {\n                code: error.code,\n                details: error.details,\n              },\n            });\n            return;\n          }\n          resolve(response);\n        }\n      );\n    });\n  }\n  //to do: not work now\n  addInbound(settings) {\n    return new Promise((resolve, reject) => {\n      let message = {\n        inbound: {\n          tag: settings.tag,\n          receiver_settings: this.#loadAnyMessage(RECEIVER_SETTING, {\n            port_range: {\n              from: settings.port,\n              to: settings.port,\n            },\n            listen: settings.listen.match(/\\d+\\.\\d+\\.\\d+\\.\\d+/)\n              ? { ip: settings.listen }\n              : { domain: settings.listen },\n            allocation_strategy: settings.allocate || {},\n            stream_settings: settings.streamSettings || {},\n            receive_original_destination: false,\n            sniffing_settings: settings.sniffing || {},\n          }),\n          proxy_settings: this.#loadAnyMessage(\n            PROXY_SETTINGS[settings.protocol],\n            settings.settings\n          ),\n        },\n      };\n      this.services.handler.AddInbound(message, (error, response) => {\n        if (error) {\n          this.#error('AddInbound', error);\n          resolve({\n            error: {\n              code: error.code,\n              details: error.details,\n            },\n          });\n          return;\n        }\n        resolve(response);\n      });\n    });\n  }\n  async addInboundUser(accountType, user, tag) {\n    let operation = this.#loadAnyMessage(PROXYMAN_OPERATIONS.addUser, {\n      user: {\n        level: user.level || 0,\n        email: user.email || '',\n        account: this.#loadAnyMessage(\n          ACCOUNTS[accountType],\n          user.account || {},\n          ACCOUNT_PROTO_PATH.torjan\n        ),\n      },\n    });\n    return this.#responseToObject(await this.#alterInbound(tag, operation));\n  }\n  async removeInboundUser(email, tag) {\n    let operation = this.#loadAnyMessage(PROXYMAN_OPERATIONS.removeUser, {\n      email: email,\n    });\n    return this.#responseToObject(await this.#alterInbound(tag, operation));\n  }\n}\n\nexport { V2rayManager };\n"],
  "mappings": "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",
  "names": ["protobuf", "grpc"]
}
